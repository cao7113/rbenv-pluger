#!/usr/bin/env bash
#
# Summary: manage rbenv plugins like rbenv mangage rubies
# 
# Usage: rbenv pluger l|ls|list|available
#        rbenv pluger in|pluging|inuse|use
#        rbenv pluger b|bundle <bundlename>  #e.g. default
#        rbenv pluger i|install <plugname> #e.g. ruby-build
#        rbenv pluger rm|remove <plugname> #e.g. ruby-build 
#        rbenv pluger dir <plugname> #e.g. ruby-build 
#        rbenv pluger root
#        rbenv pluger update <plugname> #e.g. ruby-build 

set -e 
[ -n "$RBENV_DEBUG" ] && set -x

[ -z "$RBENV_ROOT" ] && RBENV_ROOT=`rbenv root`
[ -n "$RBENV_ROOT" -a -d "$RBENV_ROOT" ] ||{ echo No $RBENV_ROOT dir. && exit 1;}

[ $# -lt 1 ] && exec rbenv-help pluger
action=$1 && shift

rbenv_root=$RBENV_ROOT
plugins_root=$RBENV_ROOT/plugins && mkdir -p $plugins_root

share_dir=$(readlink -f $(dirname $0)/../share)
plugdef_dir=$share_dir/plug
default_bundle_dir=$share_dir/bundle

function installer(){
  [ $# -lt 1 ] && rbenv-help pluger && return 1
  plugname=$1 && shift
  plugdir=$plugins_root/$plugname

  case "$1" in
    -r|--remove)
      if [ -d $plugdir ];then
        rm -fr $plugdir && echo rm plugin: $plugname
      else
        echo No $plugdir for plug: $plugname 
      fi
      ;;
    -d|--dir)
      echo $plugdir
      ;;
    --fetch)
      [ -d $plugdir ] &&{ cd $plugdir && git pull;}|| { echo No $plugdir && exit 1;}
      ;;
    *) 
      [ -d $plugdir ] && echo Warn: already exists $plugdir && return 0
      plugfile=$plugdef_dir/$plugname
      if [ -f $plugfile ];then
        source $plugfile 
        [ -n "$plugrepo" ] || { echo Expect variable: plugrepo && return 1;}
        git clone $plugrepo $plugins_root/$plugname 
        echo Install plug: $plugname in $plugdir
      else
        echo Require plugfile: $plugfile for plugin: $plugname
      fi
      ;;
  esac
}

function bundle_plugs(){
  [ $# -lt 1 ] && rbenv-help pluger && return 1
  bundle_name=$1 && shift
  bundle_dirs=( ~/.rbenv-pluger-bundle $default_bundle_dir )
  for bdir in ${bundle_dirs[@]}; do
    bundle_file=$bdir/$bundle_name
    if [ -f $bundle_file ];then
      echo Using bundle file: $bundle_file 
      found=1
      break 
    fi
  done
  unset bdir
  if [ -z "$found" ];then
    echo Unknown bundle: $bundle_name file in ${bundle_dirs[@]}
    return 1
  fi
  for plug in `cat $bundle_file`; do
    rbenv pluger install $plug
  done
  echo Bundled $bundle_name
}

case "$action" in
  l|ls|list|avaliable)
    ls -1 $plugdef_dir
    ;;
  in|pluging|inuse|use)
    ls -1 $plugins_root
    ;;
  i|install)
    installer $@
    ;;
  rm|remove)
    installer $1 --remove
    ;;
  b|bundle|group)
    bundle_plugs $@
    ;;
  d|dir)
    installer $1 --dir
    ;;
  root)
    echo $plugins_root
    ;;
  fetch|update)
    installer $1 --fetch
    ;;
  url)
    grep --color=always --no-filename http $plugdef_dir/*
    ;;
  *)
    exec rbenv-help pluger
    ;;
esac
