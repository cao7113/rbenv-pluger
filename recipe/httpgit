#!/usr/bin/env bash

#Build a local git server with http protocol
set -e

repos=${REPOS:-~/tmp/repos}
mkdir -p $repos
repos_port=${REPOS_PORT:-9000}

action=$1
case $action in
  add|create|register|reg) 
    repo=${2:-`pwd`}
    [ ! -e $repo/.git ] && echo $repo is not a git repo. && exit 1
    reponame=`basename $repo`
    [ -e $repos/$reponame.git ] && echo Has created $repos/$reponame.git && exit 1
    #TODO can just a soft link to original repo? good idea!
    git clone --bare $repo $repos/$reponame.git
    cp $repos/$reponame.git/hooks/post-update.sample $repos/$reponame.git/hooks/post-update
    (cd $repos/$reponame.git && git update-server-info && echo ran git update-server-info ...)
    echo Created $repos/$reponame.git, you can git clone http://x.x.x.x:$repos_port/$reponame.git
    ;;
  redeploy)
    $0 rm $2 && $0 create $2
    ;;
  remove|rm|del)
    repo=${2:-`pwd`}
    reponame=`basename $repo`
    rm -fr $repos/$reponame.git
    echo remove $repos/$reponame.git
    ;;
  setup)
    #setup a nginx conf and restart nginx service
    conf_file=/etc/nginx/conf.d/repos.conf
    [ -e $conf_file ] && echo Existed $conf_file && exit 1
    cat<<-Doc >/tmp/repos.nginx.conf
#Generate by recipe/httpgit, please edit that instead of this. `date`
server {
  listen $repos_port;
  root $repos;
  access_log /tmp/repos.access.log;
  error_log /tmp/repos.error.log;
}
Doc
    sudo mv /tmp/repos.nginx.conf $conf_file
    echo Build a new nginx config file $conf_file on port: $repos_port
    sudo service nginx restart
    ;;
  path)
    repo=${2:-`pwd`}
    [ ! -e $repo/.git ] && echo $repo is not a git repo. && exit 1
    reponame=`basename $repo`
    echo $repos/$reponame.git
    ;;
  ls)
    ls -l $repos
    ;;
  *)
    cat $0 #help
    ;;
esac
